#!/bin/sh -eu

usage () {
    status=${1:-0}
    cat <<EOF
./cabal [command] [options]

Commands:
    build           Build this project, including all executables and test suites.
    test            Test this project, by default this runs all test suites.
    repl            Start the repl, by default on the the main library source.
    quick           Start the repl directly skipping cabal, this is useful developing
                    across multiple source trees at once.
    demo            If this project has a demo application, this builds and runs it.
    exec            If this project has an executable, this builds and runs it.
    tags            Generate tags for this project.
    lint            Lint the project.
    init            Start a new project.
    update          Cabal update, but limited to retrieving at most once per day.
    clean           Remove compiled artifacts.
EOF
    exit ${status}
}

fail () {
     message="${1:-}"
     [ -z "$message" ] || echo "${message}" 1>&2
     usage 1 1>&2
}


#
# Determine the project name from the cabal file.
#
project_name () {
    find . -maxdepth 1 -name  \*.cabal -type f | xargs basename | sed -e 's/.cabal//'
}

#
# Initialize things for a build. This can be made faster by being
# a lot smarter about doing things conditionally, but for now,
# brute force wins.
#
initialize () {
    # sandbox has all sources
    project=$(project_name)
    SANDBOX_DIR=.cabal-sandbox
    [ ! -f "${project}.sandbox" ] || {
        SANDBOX_DIR=$(cat ${project}.sandbox)
        SANDBOX="--sandbox ${SANDBOX_DIR}"
    }

    # sandbox initialized if required, this should support sandboxes in parent directories
    [ -f cabal.sandbox.config ] || {
        cabal sandbox ${SANDBOX:-} init
    }

    [ ! -f "$project.submodules" ] || {
        # submodules initialized if required, the "has it been done before" is pretty crude, but check is useful.
        cat $project.submodules | while read submodule; do
            find "$submodule" -maxdepth 2 -name \*.cabal
        done | grep -q . || (
            cd $(git rev-parse --show-toplevel)
            git submodule init
            git submodule update
        )

        cat $project.submodules | while read submodule; do
            if ! grep -q "${submodule}\"" ${SANDBOX_DIR}/add-source-timestamps; then
                cabal sandbox add-source ${SANDBOX:-} "$submodule"
            fi
        done
    }

    # all dependencies installed, and configure been run?
    cabal install -j --only-dependencies --force-reinstalls --enable-tests
    cabal configure --enable-tests
}

#
# Cabal build.
#
run_build () {
    initialize
    cabal build --ghc-option="-Werror"
}

#
# Cabal test.
#
run_test () {
    initialize
    cabal test "$@"
}

#
# Cabal repl.
#
run_repl () {
    initialize
    cabal repl "$@"
}

#
# Load up the repl in "quick" mode.
#
run_quick () {
    initialize
    [ $# -eq 1 ] || fail "Quick requires a single argument, specifying the entry point you want to load."
    [ -f "$1" ] || fail "The entry point does not exist."
    [ ! -d src ] || SRC_DIRS="-isrc"
    [ ! -d test ] || SRC_DIRS="${SRC_DIRS:-} -itest"
    [ ! -d dist/build/autogen ] || SRC_DIRS="${SRC_DIRS:-} -idist/build/autogen"
    ghci -package-db=$(find .cabal-sandbox -name '*-packages.conf.d') ${SRC_DIRS:-} "$1"
}

#
# Remove compiled artifacts.
#
run_clean () {
    cabal clean
}

#
# Build and run the configured demonstration executable.
#
run_demo () {
    echo "Someone should really implement this."
    exit 1
}

#
# Build and run the configured application executable.
#
run_exec () {
    echo "Someone should really implement this."
    exit 1
}

#
# Run hasktags on this project (building hlint if necessary).
#
run_tags () {
    # should install hasktags if it doesn't exist yet.
    hasktags -e src test main
}

#
# Run hlint on this project (building hlint if necessary).
#
run_lint () {
    # do something with hlint - need to work out best convention to build up
    echo "Someone should really implement this."
    exit 1
}

#
# Initialize an empty project with a reasonable skeleton.
#
run_init () {
    # make sure there is an empty directory and fill out skeleton
    echo "Someone should really implement this."
    exit 1
}

#
# Run cabal update, but not more often than once a day.
#
run_update () {
    if ! test -f $HOME/.cabal/packages/hackage.haskell.org/00-index.cache || find $HOME/.cabal/packages/hackage.haskell.org/00-index.cache -type f -mtime +1 | grep -q 00-index; then
        cabal update
    else
        true
    fi
}


#
# The actual start of the script.....
#


[ $# -gt 0 ] || fail

case "$1" in
-h|--help) usage ;;
esac

MODE="$1"; shift
case "$MODE" in
build|test|repl|quick|demo|exec|tags|lint|init|update|clean) run_$MODE "$@" ;;
*) fail "Unknown mode: $MODE"
esac
